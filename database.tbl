// *****************************************************************************
// database.tbl                                                    Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code
//     for the "database" module.
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2012, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2012, Catherine Burvelle <catherine@taodyne.com>
// (C) 2012,2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2012, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

PREFIX(SetConnection, tree,"connection",
              PARM(SGBD, text,)
              PARM(setHostName, text,)
              PARM(setDatabaseName, text,)
              PARM(setUserName, text,)
              PARM(setPassword, text,)
              PARM(setPort, integer,),
              return setConnection(self,SGBD,setHostName,setDatabaseName,setUserName,setPassword,setPort),
              GROUP(module.database)
              SYNOPSIS("Establishe a database connection")
              DESCRIPTION("Connect to a database. "))

PREFIX(GetTableList, tree,"table_list",
              PARM(databasename, text,),
              return getTableList (self,databasename),
              GROUP(module.database)
              SYNOPSIS("List tables in the database")
              DESCRIPTION("List tables in the specified database.")
              RETURNS(tree, "table list."))

PREFIX(GetFieldList, tree,"field_list",
              PARM(databaseName, text,)
              PARM(tableName, text,),
              return getFieldList (self,databaseName, tableName),
              GROUP(module.database)
              SYNOPSIS("List fields of a table")
              DESCRIPTION("List fields from the named tale in th specified database.")
              RETURNS(tree, "field list."))

PREFIX(SimpleQuery, tree,"query",
              PARM(databasename, text,)
              PARM(query_string, text,),
              return simpleQuery (self,databasename,query_string),
              GROUP(module.database)
              SYNOPSIS("execute a query")
              DESCRIPTION("execute a query and return the result as a tree.")
              RETURNS(tree, "query result."))

PREFIX(FilterQuery, tree,"filter_query",
              PARM(DatabaseName, text,)
              PARM(TableName, text,)
              PARM(filtre, text,),
              return filterQuery(self,DatabaseName,TableName,filtre),
              GROUP(module.database)
              SYNOPSIS("Execute a Filter")
              DESCRIPTION("Execute a Filter a retern the result.")
              RETURNS(tree, "Return the result of the filter."))

PREFIX(RelationalQuery, tree,"relational_query",
              PARM(DatabaseName, text,)
              PARM(TableName1, text,)
              PARM(filter, text,)
              PARM(TableName2, text,)
              PARM(primary_key, text,)
              PARM(field_needs, text,)
              PARM(place_id, integer,),
              return relationalQuery(self,DatabaseName,TableName1,filter,
                                     TableName2,primary_key,field_needs,place_id),
              GROUP(module.database)
              SYNOPSIS("Replace a foreigne key")
              DESCRIPTION("replace a foreigne key by another field.")
              RETURNS(tree, "Replace foreigne key by another field"))

PREFIX(CloseConnection, tree,"close_connection",
              PARM(DatabaseName, text,),
              return closeConnection(self,DatabaseName),
              GROUP(module.database)
              SYNOPSIS("close connection")
              DESCRIPTION("close the connection to a given database."))

PREFIX(CloseAllConnections, tree,"close_all_connection",,
              return closeAllConnections(self),
              GROUP(module.database)
              SYNOPSIS("close connections")
              DESCRIPTION("close all connections."))
